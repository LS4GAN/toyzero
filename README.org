#+title: LS4GAN's Toy Zero
#+EXPORT_FILE_NAME: index.html
#+setupfile: https://ls4gan.github.io/other/setup-page.org

Bare first steps toward LS4GAN.  *still work in progress*

* Goals
:PROPERTIES:
:CUSTOM_ID: goals
:END:

After some pre-requirements are met, this package automates the
preparation for and running of various Wire-Cell Toolkit jobs in order
to produce some initial datasets for initial exploration of the LS4GAN
concept.

The final results are in the form raw ADC waveform arrays in
per-channel rows of sampled columns.  Each array spans one of three
wire planes from one of six anode plane assemblies (APA) of the
ProtoDUNE-SP detector.

There are two data sets *real* and *fake*.  The *real* uses the full, best
known 2D response model and the *fake* uses an intentionally wrong
quasi-1D model which is derived from the 2D model by zeroing all
responses except those for the central wire.  (Note that this quasi-1D
model is not the same of the even less accurate 1D model as it
includes the variation within the central wire region.)

For this initial development we accept a number of simplifying
"cheats" which we will rectify as we gain experience.  They are at
least the following:

- Use of simulation for both "real" and "fake".  Eventually, "real"
  will be detector data and "fake" will from our best available
  simulation (currently 2D Wire Cell).  We may use paired data for
  evaluating the technique in this stage but can not rely on it going
  forward.

- Our initial /data tier/ is that of *ADC waveforms* and those from only
  ionization electrons from *ideal tracks* and in particular *excluding
  noise* effects.  We eventually will use realistic track simulation
  (Geant4) and will include noise.  When adding noise we will switch
  to a /data tier/ of *reconstructed signal waveforms*.  To produce them
  we will include *noise models* in the simulation and apply *noise
  filtering* to both the fake simulation and the real detector data
  just prior to applying *signal processing*.


* Prepare
:PROPERTIES:
:CUSTOM_ID: prepare
:END:

This package requires a few user environment settings to support use
of Wire-Cell Toolkit and various Python packages.  We will assume
[[https://direnv.net/][direnv]] is used to manage the environment.  To use *another environment
management system*, translate the contents of the example [[file:dot.envrc][dot.envrc]].

** Environment

A one time setup of direnv:

#+begin_example
  $ cd toyzero
  $ cp dot.envrc .envrc
  $ emacs .envrc  # edit to taste
  $ direnv allow
#+end_example

** Check Wire-Cell Toolkit

The Wire-Cell Toolkit program ~wire-cell~ and its libraries are
required.  See https://wirecell.bnl.gov/ for installation information.
Check if WCT is available with these commands:

#+begin_example
  $ wire-cell --help
  $ wcsonnet wirecell.jsonnet
  $ echo $WIRECELL_PATH
#+end_example

The ~WIRECELL_PATH~ should include at least the ~cfg/~ directory provided
by WCT.  This ~toyzero~ package provides additional configuration in
[[file:cfg/][./cfg]] which will found automatically.

** Python

The stand-alone ~wire-cell-python~ package, the ~snakemake~ program and
various other Python 3 packages are required.  

#+begin_example
  $ cd toyzero
  $ pip install -r requirements.txt
#+end_example

Some checks:

#+begin_example
  $ wirecell-<TAB>
  $ wirecell-util --help
  $ snakemake --help
#+end_example

*** Hacking

The above installs WCT python for use.  To develop that code without
having to go through many GitHub pushes we can leverage the ~direnv~
environment for ~toyzero~ use:

#+begin_example
  $ git clone git@github.com:wirecell/wire-cell-python.git
  $ cd wire-cell-python/
  $ pip install -U -e .
#+end_example

You can now hack on wire-cell-python and your changes are immediately
made available.

* Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

Exercising toyzero will automatically download various files from
Wire-Cell GitHub and run various programs.  

#+begin_export 
  $ snakemake -jall all
  $ tree data plots
#+end_export

This can take ten minutes or so depending on how fast your CPU is.

* Details
:PROPERTIES:
:CUSTOM_ID: details
:END:

Looking into the [[file:Snakefile][Snakefile]] one will see the ~all~ target aggregates a
number of ~all_*~ sub-targets.

** resp

The ~all_resp~ target gets 2D WCT "response file" and derive from it
quasi-1D response file and make some diagnostic plots for each.

Visualization of q1D and 2D responses are generated and shown below.
First "fake" q1D and "real" 2D.  These show the instantaneous induced
current (Z-axis) on a "wire of interest" for an that started at the
transverse pitch direction (Y-axis) when it is at the moment of time
(X-axis).  Note, the current is in log10 units.

#+ATTR_HTML: :width 90%
[[file:plots/fake-resps-diagnostic.png]]

#+ATTR_HTML: :width 90%
[[file:plots/real-resps-diagnostic.png]]

** wires

The ~all_wires~ target gets WCT "wires file" and makes a multipage PDF
file with diagnostic plots at [[file:plots/wires-diagnostic.pdf]].  Most
of these pages may be too esoteric for most users and they
exhaustively cover all six protodune APAs.  However, the pages showing
wire segments may be instructive.

** depos

The ~all_depos~ target generates sets of ionization point depositions
for input to the WCT simulation.  It produces a file:

#+begin_example
  data/{wire}-depos.npz
#+end_example

Where ~{wire}~ names the wires file.  The file is in Numpy format with
arrays named like:

#+begin_example
  depo_data_<N>
  depo_info_<N>
#+end_example

The ~<N>~ counts a set of depos which are generated together (eg, an
"event").  The ~data~ arrays are 2D of shape ~(7, n)~ where ~n~ is the number
of depositions, O(1M).  Each depo is a 7-tuple with elements:

1. time
2. number of electrons
3. X position
4. Y position
5. Z position
6. longitudinal extent (zero here)
7. transverse extent (zero here)

Additional ~info~ arrays will be found in the file and can be
ignored here.

A simple summary diagnostic plot is generated showing distribution of
depo times and the depo locations.

#+ATTR_HTML: :width 90%
[[file:plots/depos-diagnostic.png]]



** frames

The ~all_frames~ target generates "frame" data from depos by running the
Wire-Cell simulation.  The "frame" file format is described elsewhere.
For here, we treat it as a temporary.

** images

The ~all_images~ target processes each "frame" data to produce one 2D
image for each of three wire planes of each of six anode plane
assemblies.  The file name and name of the single array in the file
match.  For example:

#+begin_example
❯ wirecell-util npzls data/images/real/protodune-orig-0-1-W.npz 
protodune-orig-0-1-W (960, 6000)
#+end_example

This file holds one array of 960 channels and 6000 sample time "ticks"
and is from index=0 from the "real" data, APA ID 1 and plane "W"
(collection plane aka plane 2 counting from 0).  "U" and "V" are
induction planes and each will have 800 channels and the
contemporaneous 6000 ticks.

The array may be simply, if not beautifully, visualized with:

#+begin_example
❯ wirecell-util npz-to-img -o protodune-orig-0-1-W.png \
  data/images/real/protodune-orig-0-1-W.npz
#+end_example

[[file:protodune-orig-0-1-W.png]]


